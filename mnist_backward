import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data
import mnist_forward
import os
import mnist_generateds

BATCH_SIZE = 200  # 每轮喂入神经网络的图片数量
LEARNING_RATE_BASE = 0.1  # 初始学习率
LEARNING_RATE_DECAY = 0.99  # 衰减率
REGULARIZER = 0.0001  # 正则化系数
STEPS = 50000  # 训练多少次
MOVING_AVERAGE_DECAY = 0.99  # 滑动平均衰减率
MODEL_SAVE_PATH = "./model/"  # 模型的保存路径
MODEL_NAME = "mnist_model"  # 模型保存名字
train_num_example = 6000    #总样本数


def backward(mnist):
    x = tf.placeholder(tf.float32, [None, mnist_forward.INPUT_NODE])   #用placeholder给x 和 y_占位
    y_ = tf.placeholder(tf.float32, [None, mnist_forward.OUTPUT_NODE])
    y = mnist_forward.forward(x, REGULARIZER)   #调用前向传播的函数计算输出y
    global_step = tf.Variable(0, trainable=False)  #轮数计数器赋初值，不可计算

    ce = tf.nn.sparse_softmax_cross_entropy_with_logits(logits=y, lables=tf.argmax(y_, 1))
    cem = tf.reduce_mean(ce)
    loss = cem + tf.add_n(tf.get_collection('losses'))   #包含正则化系数的损失函数loss

    learing_rate = tf.train.exponential_decay(          #定义指数衰减
        LEARNING_RATE_BASE,
        global_step,
        mnist.train.num_example / BATCH_SIZE,
        LEARNING_RATE_DECAY,
        staircase=True
    )
    train_step = tf.train.GradientDescentOptimizer(learing_rate).minimize(loss, global_step=global_step)
    #定义训练过程
    ema = tf.train.ExponentialMovingAverage(MOVING_AVERAGE_DECAY, global_step)
    ema_op = ema.apply(tf.trainable_variables())    #定义滑动平均
    with tf.control_dependencies([train_step, ema_op]):
        train_op = tf.no_op(name='train')

        saver = tf.train.Saver()            #实际化
        img_batch, label_batch = mnist_generateds.get_tfrecord(BATCH_SIZE, isTrain=True)   #获取图片和标签

        with tf.Session() as sess:               #初始化所有变量
            init_op = tf.global_variables_initializer()
            sess.run(init_op)

            ckpt = tf.train.get_checkpoint_state(MODEL_SAVE_PATH)   #给所有的w和b赋保存到ckpt的值，实现断点续训的功能
            if ckpt and ckpt.model_checkpoint_path:
                saver.restore(sess, ckpt.model_checkpoint_path)     #将ckpt恢复到当前会话

            coord = tf.train.Coordinator()
            threads = tf.train.start_queue_runners(sess=sess, coord=coord)   #开启线程协调器

            for i in range(STEPS):
                xs, ys = sess.run([img_batch, label_batch])      #每次读入图片和标签
                # xs, ys = mnist.train.next_batch(BATCH_SIZE)
                _, loss_value, step = sess.run([train_op, loss, global_step], feed_dict={x: xs, y_: ys})  #喂入神经网络，执行训练过程
                if i % 1000 == 0:       #每一千轮打印当前的loss值
                    print("After %d training step(s), loss on training bath is %g" % (step, loss_value))
                    saver.save(sess, os.path.join(MODEL_SAVE_PATH, MODEL_NAME), global_step=global_step)
                    #保存模型到当前会话
                coord.request_stop()     #关闭线程协调器
                coord.join(threads)


def main():
    mnist = input_data.read_data_sets("./data/", one_hot=True)
    backward(mnist)

    if __name__ == '__main__':
        main()

