import tensorflow as tf
import numpy as np
from PIL import Image
from pip._vendor.distlib.compat import raw_input

import mnist_backward
import mnist_forward

def restore_model(testPicArr):
    with tf.Graph().as_default() as tg:     #tf.Graph重现计算图
        x = tf.placeholder(tf.float32, [None, mnist_forward.INPUT_NODE])
        y = mnist_forward.forward(x, None)
        preValue = tf.argmax(y, 1)          #y的最大值对应的列表索引号就是预测结果

        variable_averages = tf.train.ExponentialMovingAverage(mnist_backward.NOVING_AVERAGE_DECAY)
        variable_to_restore = variable_averages.variables_to_restore()
        saver = tf.train.Saver(variable_to_restore)

        with tf.Session() as sess:
            ckpt = tf.train.get_checkpoint_state(mnist_backward.MODEL_SAVE_PATH)
            if ckpt and ckpt.model_checkpoint_path:
                saver.restore(sess, ckpt.model_checkpoint_path)   #恢复ckpt的参数等信息到当前会话

                preValue = sess.run(preValue, feed_dict={x:testPicArr})   #将整理好的图片喂入网络，进行预测操作
                return preValue
            else:
                print("No checkpoint file found")
                return -1


def pre_pic(picName):
    img = Image.open(picName)                                #打开传入的原始图片
    reIm = img.resize((28,28), Image.ANTIALIAS)              #resize像素为28*28，用消除锯齿的方法resize
    im_arr = np.array(reIm.convert('L'))                     #将图转化为灰度图，以矩阵形式赋值给im_arr
    threshold = 50
    for i in range(28):                  #遍历每一个像素点，使像素点反置（输入为白底黑字，模型要求为黑底白字）
        for j in range(28):
            im_arr[i][j] = 255 - im_arr[i][j]
            if (im_arr[i][j] < threshold):
                im_arr[i][j] = 0
            else: im_arr[i][j] = 255

    nm_arr = im_arr.reshape([1, 784])          #整理形状，变为一行784列
    nm_arr = nm_arr.astype(np.float32)         #变为浮点数
    img_ready = np.multiply(nm_arr, 1.0/255.0)  #将图片的像素值从1到255变为0到1的浮点数

    return img_ready

def application():
    testNum = input("input the number of test pictures: ")    #从控制台读入数据
    for i in range(testNum):
        testPic = raw_input("the path of test picture: ")     #可以从控制台读入字符串
        testPicArr = pre_pic(testPic)                         #图片预处理
        prevalue = restore_model(testPicArr)                  #将整理好的图片喂入神经网络
        print("The prediction number is: ", prevalue)

def main():
    application()

if __name__ =='__main__':
    main()



