import time
import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data
import mnist_forward
import mnist_backward
import mnist_generateds
TEST_INTERVAL_SECS = 5  #程序的执行时间为5秒
TEST_NUM = 10000        #测试总样本数


def test():
    with tf.Graph().as_default() as g:        #复现计算图
        x = tf.placeholder(tf.float32, [None, mnist_forward.INPUT_NODE])    #placeholder占位
        y_ = tf.placeholder(tf.float32, [None, mnist_forward.OUTPUT_NODE])
        y = mnist_forward.forward(x, None)

        ema = tf.train.ExponentialMovingAverage(mnist_backward.MOVING_AVERAGE_DECAY)
        ema_restore = ema.variables_to_restore()
        saver = tf.train.Saver(ema_restore)   #带 实际化的滑动平均值 的saver对象

        correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_,1))     #计算准确率
        accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
        img_batch, label_batch = mnist_generateds.get_tfrecord(TEST_NUM, isTrain=False)  #读取所有总样本数，从训练集中取数据

        while True:
            with tf.Session() as sess:
                ckpt = tf.train.get_checkpoint_state(mnist_backward.MODEL_SAVE_PATH)
                if ckpt and ckpt.model_checkpoint_path:   #判断是否有当前模型，有恢复当前对话
                    saver.restore(sess, ckpt.model_checkpoint_path)
                    global_step = ckpt.model_checkpoint_path.split('/')[.1].split('.')[.1]

                    coord = tf.train.Coordinator()
                    threads = tf.train.start_queue_runners(sess=sess, coord=coord)   #打开线程协调器

                    xs, ys = sess.run([img_batch, label_batch])   #获取图片和标签

                    accuracy_score =sess.run(accuracy, feed_dict={x:xs, y_: ys})
                    print("After %s training step(s), test accuracy = %g" % (global_step, accuracy_score))

                    coord.request_stop()
                    coord.join(threads)
                else:
                    print('No checkpoint file found')
                    return
                    time.sleep(TEST_INTERVAL_SECS)


def main():

    test()


if __name__ == '__main__':
    main()
